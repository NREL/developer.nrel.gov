<% loader = MultiJson.load(RestClient.get("https://developer.nrel.gov/api/alt-fuel-stations/v1/locator/loader.json", :params => { :country => "all", :api_key => ENV["DOCS_API_KEY"] })) %>
<tr>
  <th class="doc-parameter-name" scope="row">status</th>
  <td class="doc-parameter-required">No</td>
  <td class="doc-parameter-value">
    <div class="doc-parameter-value-field">
      <strong>Type:</strong> string
    </div>
    <div class="doc-parameter-value-field">
      <strong>Default:</strong> <em>all</em>
    </div>
    <div class="doc-parameter-value-field">
      <strong>Options:</strong> <%= loader.fetch("status_types").map { |status_type| "<em>#{status_type.fetch("key")}</em>" }.join(", ") %>
    </div>
  </td>
  <td class="doc-parameter-description">
    <p>Return stations that match the given status. A single status, or a comma-separated list of multiple statuses, may be given.</p>
    <table border="0" cellpadding="0" cellspacing="0" class="table table-bordered">
      <thead>
        <tr>
          <th scope="col">Option</th>
          <th scope="col">Description</th>
        </tr>
      </thead>
      <tbody>
        <% loader.fetch("status_types").each do |status_type| %>
          <tr>
            <th scope="row"><%= status_type.fetch("key") %></th>
            <td><%= status_type.fetch("name") %></td>
          </tr>
        <% end %>
      </tbody>
    </table>
  </td>
</tr>
<tr>
  <th class="doc-parameter-name" scope="row">access</th>
  <td class="doc-parameter-required">No</td>
  <td class="doc-parameter-value">
    <div class="doc-parameter-value-field">
      <strong>Type:</strong> string
    </div>
    <div class="doc-parameter-value-field">
      <strong>Default:</strong> <em>all</em>
    </div>
    <div class="doc-parameter-value-field">
      <strong>Options:</strong> <%= loader.fetch("access_types").map { |access_type| "<em>#{access_type.fetch("key")}</em>" }.join(", ") %>
    </div>
  </td>
  <td class="doc-parameter-description">
    <p>Return stations with the given access type.</p>
    <table border="0" cellpadding="0" cellspacing="0" class="table table-bordered">
      <thead>
        <tr>
          <th scope="col">Option</th>
          <th scope="col">Description</th>
        </tr>
      </thead>
      <tbody>
        <% loader.fetch("access_types").each do |access_type| %>
          <tr>
            <th scope="row"><%= access_type.fetch("key") %></th>
            <td><%= access_type.fetch("name") %></td>
          </tr>
        <% end %>
      </tbody>
    </table>
  </td>
</tr>
<% fuels = MultiJson.load(RestClient.get("https://developer.nrel.gov/api/alt-fuel-stations/v1/fuels.json", :params => { :country => "all", :api_key => ENV["DOCS_API_KEY"] })) %>
<tr>
  <th class="doc-parameter-name" scope="row">fuel_type</th>
  <td class="doc-parameter-required">No</td>
  <td class="doc-parameter-value">
    <div class="doc-parameter-value-field">
      <strong>Type:</strong> string
    </div>
    <div class="doc-parameter-value-field">
      <strong>Default:</strong> <em>all</em>
    </div>
    <div class="doc-parameter-value-field">
      <strong>Options:</strong> <%= fuels.map { |fuel| "<em>#{fuel.fetch("key")}</em>" }.join(", ") %>
    </div>
  </td>
  <td class="doc-parameter-description">
    <p>Return stations that supply any of the given fuel types. A single fuel type, or a comma-separated list of multiple fuel types, may be given.</p>
    <table border="0" cellpadding="0" cellspacing="0" class="table table-bordered">
      <thead>
        <tr>
          <th scope="col">Value</th>
          <th scope="col">Description</th>
        </tr>
      </thead>
      <tbody>
        <% fuels.each do |fuel| %>
          <tr>
            <th scope="row"><%= fuel.fetch("key") %></th>
            <td><%= fuel.fetch("name") %></td>
          </tr>
        <% end %>
      </tbody>
    </table>
  </td>
</tr>
<% payment_methods = MultiJson.load(RestClient.get("https://developer.nrel.gov/api/alt-fuel-stations/v1/payment-methods.json", :params => { :country => "all", :api_key => ENV["DOCS_API_KEY"] })) %>
<tr>
  <th class="doc-parameter-name" scope="row">cards_accepted</th>
  <td class="doc-parameter-required">No</td>
  <td class="doc-parameter-value">
    <div class="doc-parameter-value-field">
      <strong>Type:</strong> string
    </div>
    <div class="doc-parameter-value-field">
      <strong>Default:</strong> <em>all</em>
    </div>
    <div class="doc-parameter-value-field">
      <strong>Options:</strong> <%= payment_methods.map { |payment_method| "<em>#{payment_method.fetch("key")}</em>" }.join(", ") %>
    </div>
  </td>
  <td class="doc-parameter-description">
    <p>Return stations that accept any of the given payment methods. A single payment method, or a comma-separated list of multiple payment methods, may be given.</p>
    <table border="0" cellpadding="0" cellspacing="0" class="table table-bordered">
      <thead>
        <tr>
          <th scope="col">Option</th>
          <th scope="col">Description</th>
        </tr>
      </thead>
      <tbody>
        <% payment_methods.each do |payment_method| %>
          <tr>
            <th scope="row"><%= payment_method.fetch("key") %></th>
            <td><%= payment_method.fetch("name") %></td>
          </tr>
        <% end %>
      </tbody>
    </table>
  </td>
</tr>
<% owner_types = MultiJson.load(RestClient.get("https://developer.nrel.gov/api/alt-fuel-stations/v1/owner-types.json", :params => { :country => "all", :api_key => ENV["DOCS_API_KEY"] })) %>
<tr>
  <th class="doc-parameter-name" scope="row">owner_type</th>
  <td class="doc-parameter-required">No</td>
  <td class="doc-parameter-value">
    <div class="doc-parameter-value-field">
      <strong>Type:</strong> string
    </div>
    <div class="doc-parameter-value-field">
      <strong>Default:</strong> <em>all</em>
    </div>
    <div class="doc-parameter-value-field">
      <strong>Options:</strong> <%= owner_types.map { |owner_type| "<em>#{owner_type.fetch("key")}</em>" }.join(", ") %>
    </div>
  </td>
  <td class="doc-parameter-description">
    <p>Return stations owned by the given types of owners. A single owner type, or a comma-separated list of multiple owner types, may be given.</p>
    <table border="0" cellpadding="0" cellspacing="0" class="table table-bordered">
      <thead>
        <tr>
          <th scope="col">Option</th>
          <th scope="col">Description</th>
        </tr>
      </thead>
      <tbody>
        <% owner_types.each do |owner_type| %>
          <tr>
            <th scope="row"><%= owner_type.fetch("key") %></th>
            <td><%= owner_type.fetch("name") %></td>
          </tr>
        <% end %>
      </tbody>
    </table>
  </td>
</tr>
<% federal_agencies = MultiJson.load(RestClient.get("https://developer.nrel.gov/api/alt-fuel-stations/v1/federal-agencies.json", :params => { :country => "all", :api_key => ENV["DOCS_API_KEY"] })) %>
<tr id="request-federal-agency">
  <th class="doc-parameter-name" scope="row">federal_agency</th>
  <td class="doc-parameter-required">No</td>
  <td class="doc-parameter-value">
    <div class="doc-parameter-value-field">
      <strong>Type:</strong> string
    </div>
    <div class="doc-parameter-value-field">
      <strong>Default:</strong> <em>all</em>
    </div>
    <div class="doc-parameter-value-field">
      <strong>Options:</strong> <%= federal_agencies.map { |federal_agency| "<em>#{federal_agency.fetch("key")}</em>" }.join(", ") %>
    </div>
  </td>
  <td class="doc-parameter-description">
    <p>Return stations owned by the given federal agency. A federal agency code, or a comma-separated list of multiple federal agency codes, may be given.</p>
    <table border="0" cellpadding="0" cellspacing="0" class="table table-bordered">
      <thead>
        <tr>
          <th scope="col">Option</th>
          <th scope="col">Description</th>
        </tr>
      </thead>
      <tbody>
        <% federal_agencies.each do |federal_agency| %>
          <tr>
            <th scope="row"><%= federal_agency.fetch("key") %></th>
            <td><%= federal_agency.fetch("name") %><%= " (#{federal_agency.fetch("country")})" if(federal_agency.fetch("key") != "all") %></td>
          </tr>
        <% end %>
      </tbody>
    </table>
  </td>
</tr>
<tr>
  <th class="doc-parameter-name" scope="row">federal_agency_id</th>
  <td class="doc-parameter-required">No</td>
  <td class="doc-parameter-value">
    <div class="doc-parameter-value-field">
      <strong>Type:</strong> integer
    </div>
    <div class="doc-parameter-value-field">
      <strong>Default:</strong> <em>all</em>
    </div>
    <div class="doc-parameter-value-field">
      <strong>Options:</strong> <%= federal_agencies.map { |federal_agency| "<em>#{federal_agency.fetch("id")}</em>" }.join(", ") %>
    </div>
  </td>
  <td class="doc-parameter-description">
    <p>Deprecated: See <a href="#request-federal-agency"><code>federal_agency</code></a>. (Note: this query parameter will remain for legacy application support)</p>
    <p>Return stations owned by the given federal agency. A federal agency ID, or a comma-separated list of multiple federal agency IDs, may be given.</p>
    <table border="0" cellpadding="0" cellspacing="0" class="table table-bordered">
      <thead>
        <tr>
          <th scope="col">Option</th>
          <th scope="col">Description</th>
        </tr>
      </thead>
      <tbody>
        <% federal_agencies.each do |federal_agency| %>
          <tr>
            <th scope="row"><%= federal_agency.fetch("id") %></th>
            <td><%= federal_agency.fetch("name") %><%= " (#{federal_agency.fetch("country")})" if(federal_agency.fetch("key") != "all") %></td>
          </tr>
        <% end %>
      </tbody>
    </table>
  </td>
</tr>
<% cng_fill_types = MultiJson.load(RestClient.get("https://developer.nrel.gov/api/alt-fuel-stations/v1/cng-fill-types.json", :params => { :country => "all", :api_key => ENV["DOCS_API_KEY"] })) %>
<tr>
  <th class="doc-parameter-name" scope="row">cng_fill_type</th>
  <td class="doc-parameter-required">No</td>
  <td class="doc-parameter-value">
    <div class="doc-parameter-value-field">
      <strong>Type:</strong> string
    </div>
    <div class="doc-parameter-value-field">
      <strong>Default:</strong> <em>all</em>
    </div>
    <div class="doc-parameter-value-field">
      <strong>Options:</strong> <%= cng_fill_types.map { |cng_fill_type| "<em>#{cng_fill_type.fetch("key")}</em>" }.join(", ") %>
    </div>
  </td>
  <td class="doc-parameter-description">
    <p>Return only CNG stations that provide the specified type of dispensing capability. A single type, or a comma separated list of multiple types, may be given.</p>
    <table border="0" cellpadding="0" cellspacing="0" class="table table-bordered">
      <thead>
        <tr>
          <th scope="col">Value</th>
          <th scope="col">Description</th>
        </tr>
      </thead>
      <tbody>
        <% cng_fill_types.each do |cng_fill_type| %>
          <tr>
            <th scope="row"><%= cng_fill_type.fetch("key") %></th>
            <td><%= cng_fill_type.fetch("name") %></td>
          </tr>
        <% end %>
      </tbody>
    </table>
  </td>
</tr>
<tr>
  <th class="doc-parameter-name" scope="row">cng_has_rng</th>
  <td class="doc-parameter-required">No</td>
  <td class="doc-parameter-value">
    <div class="doc-parameter-value-field">
      <strong>Type:</strong> string
    </div>
    <div class="doc-parameter-value-field">
      <strong>Default:</strong> <em>all</em>
    </div>
    <div class="doc-parameter-value-field">
      <strong>Options:</strong> <em>all, true, false</em>
    </div>
  </td>
  <td class="doc-parameter-description">
    <p>Return compressed natural gas (CNG) stations based on whether they sell renewable natural gas (RNG).</p>
    <table border="0" cellpadding="0" cellspacing="0" class="table table-bordered">
      <thead>
        <tr>
          <th scope="col">Option</th>
          <th scope="col">Description</th>
        </tr>
      </thead>
      <tbody>
          <tr>
            <th scope="row">all</th>
            <td>All CNG stations</td>
          </tr>
          <tr>
            <th scope="row">true</th>
            <td>Only CNG stations that sell RNG</td>
          </tr>
          <tr>
            <th scope="row">false</th>
            <td>Only CNG stations that don't sell RNG</td>
          </tr>
      </tbody>
    </table>
  </td>
</tr>
<% cng_psis = MultiJson.load(RestClient.get("https://developer.nrel.gov/api/alt-fuel-stations/v1/cng-psis.json", :params => { :country => "all", :api_key => ENV["DOCS_API_KEY"] })) %>
<tr>
  <th class="doc-parameter-name" scope="row">cng_psi</th>
  <td class="doc-parameter-required">No</td>
  <td class="doc-parameter-value">
    <div class="doc-parameter-value-field">
      <strong>Type:</strong> string
    </div>
    <div class="doc-parameter-value-field">
      <strong>Default:</strong> <em>all</em>
    </div>
    <div class="doc-parameter-value-field">
      <strong>Options:</strong> <%= cng_psis.map { |cng_psi| "<em>#{cng_psi.fetch("key")}</em>" }.join(", ") %>
    </div>
  </td>
  <td class="doc-parameter-description">
    <p>Return only CNG stations that provide the specified PSI pressure. A single pressure level, or a comma separated list of multiple pressure levels, may be given.</p>
    <table border="0" cellpadding="0" cellspacing="0" class="table table-bordered">
      <thead>
        <tr>
          <th scope="col">Value</th>
          <th scope="col">Description</th>
        </tr>
      </thead>
      <tbody>
        <% cng_psis.each do |cng_psi| %>
          <tr>
            <th scope="row"><%= cng_psi.fetch("key") %></th>
            <td><%= cng_psi.fetch("name") %></td>
          </tr>
        <% end %>
      </tbody>
    </table>
  </td>
</tr>
<% cng_vehicle_classes = MultiJson.load(RestClient.get("https://developer.nrel.gov/api/alt-fuel-stations/v1/cng-vehicle-classes.json", :params => { :country => "all", :api_key => ENV["DOCS_API_KEY"] })) %>
<tr>
  <th class="doc-parameter-name" scope="row">cng_vehicle_class</th>
  <td class="doc-parameter-required">No</td>
  <td class="doc-parameter-value">
    <div class="doc-parameter-value-field">
      <strong>Type:</strong> string
    </div>
    <div class="doc-parameter-value-field">
      <strong>Default:</strong> <em>all</em>
    </div>
    <div class="doc-parameter-value-field">
      <strong>Options:</strong> <%= cng_vehicle_classes.map { |cng_vehicle_class| "<em>#{cng_vehicle_class.fetch("key")}</em>" }.join(", ") %>
    </div>
  </td>
  <td class="doc-parameter-description">
    <p>Return only CNG stations that can accomodate the specified vehicle class size or greater.</p>
    <table border="0" cellpadding="0" cellspacing="0" class="table table-bordered">
      <thead>
        <tr>
          <th scope="col">Value</th>
          <th scope="col">Description</th>
        </tr>
      </thead>
      <tbody>
        <% cng_vehicle_classes.each do |cng_vehicle_class| %>
          <tr>
            <th scope="row"><%= cng_vehicle_class.fetch("key") %></th>
            <td><%= cng_vehicle_class.fetch("name") %></td>
          </tr>
        <% end %>
      </tbody>
    </table>
  </td>
</tr>
<tr>
  <th class="doc-parameter-name" scope="row">e85_has_blender_pump</th>
  <td class="doc-parameter-required">No</td>
  <td class="doc-parameter-value">
    <div class="doc-parameter-value-field">
      <strong>Type:</strong> string
    </div>
    <div class="doc-parameter-value-field">
      <strong>Default:</strong> <em>all</em>
    </div>
    <div class="doc-parameter-value-field">
      <strong>Options:</strong> <em>all, true</em>
    </div>
  </td>
  <td class="doc-parameter-description">
    <p>If <code>true</code>, then return only E85 stations that also have a blender pump capable of providing mid-level ethanol blends.</p>
  </td>
</tr>
<% ev_networks = MultiJson.load(RestClient.get("https://developer.nrel.gov/api/alt-fuel-stations/v1/electric-networks.json", :params => { :country => "all", :api_key => ENV["DOCS_API_KEY"] })) %>
<tr>
  <th class="doc-parameter-name" scope="row">ev_network</th>
  <td class="doc-parameter-required">No</td>
  <td class="doc-parameter-value">
    <div class="doc-parameter-value-field">
      <strong>Type:</strong> string
    </div>
    <div class="doc-parameter-value-field">
      <strong>Default:</strong> <em>all</em>
    </div>
    <div class="doc-parameter-value-field">
      <strong>Options:</strong> <%= ev_networks.map { |ev_network| "<em>#{ev_network.fetch("key")}</em>" }.join(", ") %>
    </div>
  </td>
  <td class="doc-parameter-description">
    <p>Return only electric charging stations that belong to the given network. A single network, or a comma separated list of multiple networks, may be given.</p>
    <table border="0" cellpadding="0" cellspacing="0" class="table table-bordered">
      <thead>
        <tr>
          <th scope="col">Option</th>
          <th scope="col">Description</th>
        </tr>
      </thead>
      <tbody>
        <% ev_networks.each do |ev_network| %>
          <tr>
            <th scope="row"><%= ev_network.fetch("key") %></th>
            <td><%= ev_network.fetch("name") %></td>
          </tr>
        <% end %>
      </tbody>
    </table>
  </td>
</tr>
<% electric_levels = MultiJson.load(RestClient.get("https://developer.nrel.gov/api/alt-fuel-stations/v1/electric-levels.json", :params => { :country => "all", :api_key => ENV["DOCS_API_KEY"] })) %>
<tr>
  <th class="doc-parameter-name" scope="row">ev_charging_level</th>
  <td class="doc-parameter-required">No</td>
  <td class="doc-parameter-value">
    <div class="doc-parameter-value-field">
      <strong>Type:</strong> string
    </div>
    <div class="doc-parameter-value-field">
      <strong>Default:</strong> <em>all</em>
    </div>
    <div class="doc-parameter-value-field">
      <strong>Options:</strong> <%= electric_levels.map { |electric_level| "<em>#{electric_level.fetch("key")}</em>" }.join(", ") %>
    </div>
  </td>
  <td class="doc-parameter-description">
    <p>Return only electric charging stations that provide the given level of electric vehicle supply equipment (EVSE).</p>
    <table border="0" cellpadding="0" cellspacing="0" class="table table-bordered">
      <thead>
        <tr>
          <th scope="col">Option</th>
          <th scope="col">Description</th>
        </tr>
      </thead>
      <tbody>
        <% electric_levels.each do |electric_level| %>
          <tr>
            <th scope="row"><%= electric_level.fetch("key") %></th>
            <td><%= electric_level.fetch("name") %></td>
          </tr>
        <% end %>
      </tbody>
    </table>
  </td>
</tr>
<% electric_connectors = MultiJson.load(RestClient.get("https://developer.nrel.gov/api/alt-fuel-stations/v1/electric-connectors.json", :params => { :country => "all", :api_key => ENV["DOCS_API_KEY"] })) %>
<tr>
  <th class="doc-parameter-name" scope="row">ev_connector_type</th>
  <td class="doc-parameter-required">No</td>
  <td class="doc-parameter-value">
    <div class="doc-parameter-value-field">
      <strong>Type:</strong> string
    </div>
    <div class="doc-parameter-value-field">
      <strong>Default:</strong> <em>all</em>
    </div>
    <div class="doc-parameter-value-field">
      <strong>Options:</strong> <%= electric_connectors.map { |electric_connector| "<em>#{electric_connector.fetch("key")}</em>" }.join(", ") %>
    </div>
  </td>
  <td class="doc-parameter-description">
    <p>Return only electric charging stations that provide the given connector types.</p>
    <table border="0" cellpadding="0" cellspacing="0" class="table table-bordered">
      <thead>
        <tr>
          <th scope="col">Option</th>
          <th scope="col">Description</th>
        </tr>
      </thead>
      <tbody>
        <% electric_connectors.each do |electric_connector| %>
          <tr>
            <th scope="row"><%= electric_connector.fetch("key") %></th>
            <td><%= electric_connector.fetch("name") %></td>
          </tr>
        <% end %>
      </tbody>
    </table>
  </td>
</tr>
<tr>
  <th class="doc-parameter-name" scope="row">ev_connector_type_operator</th>
  <td class="doc-parameter-required">No</td>
  <td class="doc-parameter-value">
    <div class="doc-parameter-value-field">
      <strong>Type:</strong> string
    </div>
    <div class="doc-parameter-value-field">
      <strong>Default:</strong> <em>OR</em>
    </div>
    <div class="doc-parameter-value-field">
      <strong>Options:</strong> <em>OR, AND</em>
    </div>
  </td>
  <td class="doc-parameter-description">
    <p>Control how multiple connector type options passed to the <code>ev_connector_type</code> parameter behave. The default of <code>OR</code> will return stations that have <em>any</em> of the connectors present. Specifying <code>AND</code> will only return stations that have <em>all</em> of the connectors present.</p>
    <p>For example, with the default <code>OR</code> value, then performing a query for <code>ev_connector_type=CHADEMO,J1772COMBO</code> will return any station that has either <code>CHADEMO</code> or <code>J1772COMBO</code> connectors present. Compare that to a query for <code>ev_connector_type=CHADEMO,J1772COMBO&#8203;&ev_connector_type_operator=AND</code> which will return stations that must have both <code>CHADEMO</code> and <code>J1772COMBO</code> connectors present at the same station.</p>
  </td>
</tr>
<tr>
  <th class="doc-parameter-name" scope="row">hy_is_retail</th>
  <td class="doc-parameter-required">No</td>
  <td class="doc-parameter-value">
    <div class="doc-parameter-value-field">
      <strong>Type:</strong> string
    </div>
    <div class="doc-parameter-value-field">
      <strong>Default:</strong> <em>all</em>
    </div>
    <div class="doc-parameter-value-field">
      <strong>Options:</strong> <em>all, true, false</em>
    </div>
  </td>
  <td class="doc-parameter-description">
    <p>Return only hydrogen stations that match the value. A single retail value, or a comma-separated list of multiple retail values, may be given.</p>
    <table border="0" cellpadding="0" cellspacing="0" class="table table-bordered">
      <thead>
        <tr>
          <th scope="col">Value</th>
          <th scope="col">Description</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th scope="row">all</th>
          <td>Include all hydrogen stations.</td>
        </tr>
        <tr>
          <th scope="row">true</th>
          <td>Station meets the criteria to be considered retail.</td>
        </tr>
        <tr>
          <th scope="row">false</th>
          <td>Station does not meet the criteria to be considered retail.</td>
        </tr>
      </tbody>
    </table>
  </td>
</tr>
<tr>
  <th class="doc-parameter-name" scope="row">include_ev_charging_units</th>
  <td class="doc-parameter-required">No</td>
  <td class="doc-parameter-value">
    <div class="doc-parameter-value-field">
      <strong>Type:</strong> string
    </div>
    <div class="doc-parameter-value-field">
      <strong>Default:</strong> <em>false</em>
    </div>
    <div class="doc-parameter-value-field">
      <strong>Options:</strong> <em>true, false</em>
    </div>
  </td>
  <td class="doc-parameter-description">
    <p>If <code>true</code>, then include the <code>ev_charging_units</code> field in the Fuel Station Record Fields response.</p>
  </td>
</tr>
<tr>
  <th class="doc-parameter-name" scope="row">lpg_include_secondary</th>
  <td class="doc-parameter-required">No</td>
  <td class="doc-parameter-value">
    <div class="doc-parameter-value-field">
      <strong>Type:</strong> string
    </div>
    <div class="doc-parameter-value-field">
      <strong>Default:</strong> <em>all</em>
    </div>
    <div class="doc-parameter-value-field">
      <strong>Options:</strong> <em>all, false</em>
    </div>
  </td>
  <td class="doc-parameter-description">
    <p>If <code>false</code>, then exclude LPG stations that do not meet the <a href="#response-lpg-primary">criteria</a> to be considered primary.</p>
  </td>
</tr>
<tr>
  <th class="doc-parameter-name" scope="row">lng_has_rng</th>
  <td class="doc-parameter-required">No</td>
  <td class="doc-parameter-value">
    <div class="doc-parameter-value-field">
      <strong>Type:</strong> string
    </div>
    <div class="doc-parameter-value-field">
      <strong>Default:</strong> <em>all</em>
    </div>
    <div class="doc-parameter-value-field">
      <strong>Options:</strong> <em>all, true, false</em>
    </div>
  </td>
  <td class="doc-parameter-description">
    <p>Return liquefied natural gas (LNG) stations based on whether they sell renewable natural gas (RNG).</p>
    <table border="0" cellpadding="0" cellspacing="0" class="table table-bordered">
      <thead>
        <tr>
          <th scope="col">Option</th>
          <th scope="col">Description</th>
        </tr>
      </thead>
      <tbody>
          <tr>
            <th scope="row">all</th>
            <td>All LNG stations</td>
          </tr>
          <tr>
            <th scope="row">true</th>
            <td>Only LNG stations that sell RNG</td>
          </tr>
          <tr>
            <th scope="row">false</th>
            <td>Only LNG stations that don't sell RNG</td>
          </tr>
      </tbody>
    </table>
  </td>
</tr>
<% lng_vehicle_classes = MultiJson.load(RestClient.get("https://developer.nrel.gov/api/alt-fuel-stations/v1/lng-vehicle-classes.json", :params => { :country => "all", :api_key => ENV["DOCS_API_KEY"] })) %>
<tr>
  <th class="doc-parameter-name" scope="row">lng_vehicle_class</th>
  <td class="doc-parameter-required">No</td>
  <td class="doc-parameter-value">
    <div class="doc-parameter-value-field">
      <strong>Type:</strong> string
    </div>
    <div class="doc-parameter-value-field">
      <strong>Default:</strong> <em>all</em>
    </div>
    <div class="doc-parameter-value-field">
      <strong>Options:</strong> <%= lng_vehicle_classes.map { |lng_vehicle_class| "<em>#{lng_vehicle_class.fetch("key")}</em>" }.join(", ") %>
    </div>
  </td>
  <td class="doc-parameter-description">
    <p>Return only LNG stations that can accomodate the specified vehicle class size or greater.</p>
    <table border="0" cellpadding="0" cellspacing="0" class="table table-bordered">
      <thead>
        <tr>
          <th scope="col">Value</th>
          <th scope="col">Description</th>
        </tr>
      </thead>
      <tbody>
        <% lng_vehicle_classes.each do |lng_vehicle_class| %>
          <tr>
            <th scope="row"><%= lng_vehicle_class.fetch("key") %></th>
            <td><%= lng_vehicle_class.fetch("name") %></td>
          </tr>
        <% end %>
      </tbody>
    </table>
  </td>
</tr>
<tr>
  <th class="doc-parameter-name" scope="row">state</th>
  <td class="doc-parameter-required">No</td>
  <td class="doc-parameter-value">
    <div class="doc-parameter-value-field">
      <strong>Type:</strong> string
    </div>
    <div class="doc-parameter-value-field">
      <strong>Default:</strong> None
    </div>
  </td>
  <td class="doc-parameter-description">Return only stations within the given state. State must be given as a two character state code (eg, "CO" for Colorado). A single state, or a comma-separate list of multiple states, may be given.</td>
</tr>
<tr>
  <th class="doc-parameter-name" scope="row">zip</th>
  <td class="doc-parameter-required">No</td>
  <td class="doc-parameter-value">
    <div class="doc-parameter-value-field">
      <strong>Type:</strong> string
    </div>
    <div class="doc-parameter-value-field">
      <strong>Default:</strong> None
    </div>
  </td>
  <td class="doc-parameter-description">Return only stations within the given ZIP code. ZIP codes must be exactly 5 digits long. A single ZIP code, or a comma-separate list of multiple ZIP codes, may be given.</td>
</tr>
<tr>
  <th class="doc-parameter-name" scope="row">country</th>
  <td class="doc-parameter-required">No</td>
  <td class="doc-parameter-value">
    <div class="doc-parameter-value-field">
      <strong>Type:</strong> string
    </div>
    <div class="doc-parameter-value-field">
      <strong>Default:</strong> <em>US</em>
    </div>
    <div class="doc-parameter-value-field">
      <strong>Options:</strong> <%= loader.fetch("countries").map { |country| "<em>#{country.fetch("key")}</em>" }.join(", ") %>
    </div>
  </td>
  <td class="doc-parameter-description">
    <p>Return only stations within the given country code.</p>
    <table border="0" cellpadding="0" cellspacing="0" class="table table-bordered">
      <thead>
        <tr>
          <th scope="col">Value</th>
          <th scope="col">Description</th>
        </tr>
      </thead>
      <tbody>
        <% loader.fetch("countries").each do |country| %>
          <tr>
            <th scope="row"><%= country.fetch("key") %></th>
            <td><%= country.fetch("name") %></td>
          </tr>
        <% end %>
      </tbody>
    </table>
  </td>
</tr>
